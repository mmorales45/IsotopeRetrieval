#!/usr/bin/env python
"""
This script is used to call services by running the Class below and chosing to call the correct service based on the input to the class.
"""
import argparse

from copy import deepcopy

import rospy

from std_srvs.srv import Empty, Trigger

class HardwareServices:
    """
    Create a set of services that can be used for when using the GUI based on the input to the class.
    """
    def __init__(self, hw_cmd):
        #Determine the value of the hw_cmd value and create services based on it.
        print(hw_cmd)
        self.__done = False
        rospy.wait_for_service('/ur5e/ur_hardware_interface/dashboard/power_on')
        self.__powerOn5e = rospy.ServiceProxy("/ur5e/ur_hardware_interface/dashboard/power_on",Trigger)
        self.__powerOn16e = rospy.ServiceProxy("/ur16e/ur_hardware_interface/dashboard/power_on",Trigger)
        
        self.__powerOff5e = rospy.ServiceProxy("/ur5e/ur_hardware_interface/dashboard/power_off",Trigger)
        self.__powerOff16e = rospy.ServiceProxy("/ur16e/ur_hardware_interface/dashboard/power_off",Trigger)

        self.__BR5e = rospy.ServiceProxy("/ur5e/ur_hardware_interface/dashboard/brake_release",Trigger)
        self.__BR16e = rospy.ServiceProxy("/ur16e/ur_hardware_interface/dashboard/brake_release",Trigger)

        #Switch case for arguments
        if hw_cmd == '-POn_UR5e':
            self.__powerOn5e()
        elif hw_cmd == '-POn_UR16e':
            self.__powerOn16e()
        elif hw_cmd == '-POff_UR5e':
            self.__powerOff5e()
        elif hw_cmd == '-POff_UR16e':
            self.__powerOff16e()
        elif hw_cmd == '-BR_UR5e':
            self.__BR5e()
        elif hw_cmd == '-BR_UR16e':
            self.__BR16e()

    def clean_shutdown(self):
        """Handles ROS shutdown (Ctrl-C) safely."""
        if not self.__done:
            rospy.logwarn('Aborting: Shutting down safely...')

        

def main():
    parser = argparse.ArgumentParser()
    hardware_group = parser.add_mutually_exclusive_group(required=True)


    rospy.loginfo("Initializing node... ")
    rospy.init_node("rsdk_tuck_arms")
    hardwarer = HardwareServices(rospy.myargv()[1])
    rospy.on_shutdown(hardwarer.clean_shutdown)
    rospy.loginfo("Finished tuckerrr")

if __name__ == "__main__":
    main()
