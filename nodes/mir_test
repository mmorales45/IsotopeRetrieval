#!/usr/bin/env python
##Needs python3 to work
#nvm, python3 needs tkinter, python 2.7 needs Tkinter
import sys

import rospy
from std_srvs.srv import Empty
import requests, json
from Tkinter import *

ip = '192.168.1.57' # Ip if not connected to robot itself
# host = 'http://mir.com/api/v2.0.0/'   #If connected to robot
host = 'http://' + ip + '/api/v2.0.0/'   # if not connected to robot

class mobile_base:
    """Node to test basic functions of UR robot"""
    def __init__(self): 
        self.headers = {}
        self.headers['Content-Type'] = 'application/json'
        self.headers['Authorization'] = 'Basic bWFyY286OWY4NmQwODE4ODRjN2Q2NTlhMmZlYWEwYzU1YWQwMTVhM2JmNGYxYjJiMGI4MjJjZDE1ZDZjMTViMGYwMGEwOA=='
        self.mission_service_end = rospy.Service("marco/moveto_goal", Empty,self.Mission_Start)
        self.mission_service_start = rospy.Service("marco/moveto_start", Empty,self.Mission_Reset)

        # print(headers)

        get_missions = requests.get(host + 'missions',headers = self.headers)
        list_missions = json.loads(get_missions.text)
        print("Available Missions: " + str(len(list_missions)))
        for i in list_missions:
            if i['name'] == 'Go_END':
                print("found!")
        
        # mission_id = {"mission_id": "aae45adf-d82a-11ec-84ed-00012978eb25"}
        # post_mission = requests.post(host + 'mission_queue', json = mission_id, headers = headers)

    def Mission_Start(self,req):
        mission_id = {"mission_id": "aae45adf-d82a-11ec-84ed-00012978eb25"}
        post_mission = requests.post(host + 'mission_queue', json = mission_id, headers = self.headers)
    
    def Mission_Reset(self,req):
        mission_id = {"mission_id": "aae45adf-d82a-11ec-84ed-00012978eb25"}
        post_mission = requests.post(host + 'mission_queue', json = mission_id, headers = self.headers)
    
    


def main(): #The main function.
    rospy.init_node("mir_NAVIGATOR")
    try:
        mission_move = mobile_base()
        rospy.spin()

    except rospy.ROSInterruptException:
        return
    except KeyboardInterrupt:
        return


if __name__ == "__main__":
    main()

