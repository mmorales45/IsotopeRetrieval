#!/usr/bin/env python

import rospy
import smach

####################  MIR ##################
from std_srvs.srv import Empty
import requests, json
from Tkinter import *
from requests.api import post

ip = '192.168.1.57' # Ip if not connected to robot itself
# host = 'http://mir.com/api/v2.0.0/'   #If connected to robot
host = 'http://' + ip + '/api/v2.0.0/'   # if not connected to robot
##################### 

# define state Navigate
class Navigate(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['outcome1','outcome2'])
        self.counter = 0

    def execute(self, userdata):
        rospy.loginfo('Executing state FOO')
        self.headers = {}
        self.headers['Content-Type'] = 'application/json'
        self.headers['Authorization'] = 'Basic bWFyY286OWY4NmQwODE4ODRjN2Q2NTlhMmZlYWEwYzU1YWQwMTVhM2JmNGYxYjJiMGI4MjJjZDE1ZDZjMTViMGYwMGEwOA=='
        get_missions = requests.get(host + 'missions',headers = self.headers)
        mission_id = {"mission_id": "aae45adf-d82a-11ec-84ed-00012978eb25"}
        post_mission = requests.post(host + 'mission_queue', json = mission_id, headers = self.headers)

        completed = false
        while completed is False:
            status = requests.get(host+'mission_queue', headers = headers)
            response_native = json.loads(status.text)
            if response_native[-1]['state'] =='Done':
                completed = True
            else:
                completed = False

        return 'outcome2'


# define state Manipulation
class Manipulation(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['outcome2'])

    def execute(self, userdata):
        rospy.loginfo('Executing state BAR')
        return 'outcome2'
        



# main
def main():
    rospy.init_node('smach_example_state_machine')

    # Create a SMACH state machine
    sm = smach.StateMachine(outcomes=['outcome4', 'outcome5'])

    # Open the container
    with sm:
        # Add states to the container
        smach.StateMachine.add('FOO', Foo(), 
                               transitions={'outcome1':'BAR', 
                                            'outcome2':'outcome4'})
        smach.StateMachine.add('BAR', Navigate(), 
                               transitions={'outcome2':'FOO'})

    # Execute SMACH plan
    outcome = sm.execute()


if __name__ == '__main__':
    main()