#!/usr/bin/env python

"""
    Manipulation node takes care of process of assembling and disassembling the target. It also controls 
    the missions being sent to the MiR 250 and the grippers.
    Publishers:
        ur5e/Robotiq2FGripperRobotOutput (outputMsg.Robotiq2FGripper_robot_output) - Send low level commands to the gripper on the UR5e
        ur16e/Robotiq2FGripperRobotOutput (outputMsg.Robotiq2FGripper_robot_output) - Send low level commands to the gripper on the UR16e
    SERVICES:
        marco/open_ur5e (std_srvs/Empty) - Open UR5e
        marco/close_ur5e (std_srvs/Empty) - Close UR5e
        marco/open_ur16e (std_srvs/Empty) - Open UR16e
        marco/close_ur16e (std_srvs/Empty) - Close UR16e
        marco/joint_pos (std_srvs/Empty) - Print both arm's joint position
        marco/arm_pos (std_srvs/Empty) - Print both arm's end effector position


"""
import enum
import sys

import rospy
import actionlib
from std_srvs.srv import Empty, EmptyResponse
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from controller_manager_msgs.srv import SwitchControllerRequest, SwitchController
from controller_manager_msgs.srv import LoadControllerRequest, LoadController
import geometry_msgs.msg as geometry_msgs
from argonne_final_project.msg import SetPosition

import time
import signal
from argonne_final_project.robotiq_Control_lib import RobotiqControl
from robotiq_2f_gripper_control.msg import _Robotiq2FGripper_robot_output  as outputMsg 
import moveit_commander
import tf2_ros
from sensor_msgs.msg import JointState
import copy




class MockUp:
    """Main Node to do assembly, assembly and moving the mobile base."""
    def __init__(self): 
        self.get_params()
        self.tfBuffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tfBuffer)

        moveit_commander.roscpp_initialize(sys.argv)
        self.robot = moveit_commander.RobotCommander()
        group_name_5 = "ur5e"
        self.move_group = moveit_commander.MoveGroupCommander(group_name_5)
        group_name_16 = "ur16e"
        self.move_group_16 = moveit_commander.MoveGroupCommander(group_name_16)
        
        self.joint_pos_srv = rospy.Service("marco/joint_pos", Empty , self.joint_pos)
        self.arm_pos_srv = rospy.Service("marco/arm_pos", Empty , self.arm_pos)
        self.move_GOALA = rospy.ServiceProxy('marco/moveto_goalA', Empty)
        self.move_GOALB = rospy.ServiceProxy('marco/moveto_goalB', Empty)
        self.setup_grippers()
        self.tuck() 
        
        self.tag0 = []
        self.tag2 = []
        self.tag4 = []
        self.tag5 = []
        self.flag = 0
        self.ctimer = 0
        self.gen_timer = 0
        self.second_timer = 0

        self.new_flag = 0
        self.state = 1
        
        self.move_GOALA()
        self.timer = rospy.Timer(rospy.Duration(1.0/10.0), self.main_loop)

    
    def main_loop(self,timer):
        """
        Find the April tags based on the state of the system.
        """
        if self.tag2 and self.flag == 0 and self.gen_timer > 100:
            self.cooling_detach()
            self.flag =1 
        elif self.tag0 and self.tag2 and self.tag4 and self.flag == 1:
            self.isotope_grab()
            self.flag = 2
        elif self.tag0 and self.flag ==2 and self.ctimer > 50:
            self.isotope_detach()
            self.flag = 3
            self.state = 2
        else:
            self.ctimer += 1

        if self.tag2:
            self.gen_timer += 1
        if self.tag5:
            self.second_timer += 1

        if self.tag5 and self.new_flag ==0 and self.second_timer > 150 and self.flag ==3:
            self.replace(0)
            self.new_flag = 1
            
        if self.state == 1:
            try:
                self.tag0 = self.tfBuffer.lookup_transform("base_link","Tag0",rospy.Time(0)) 
                self.tag2 = self.tfBuffer.lookup_transform("base_link","Tag2",rospy.Time(0))
                self.tag4 = self.tfBuffer.lookup_transform("base_link","Tag4",rospy.Time(0))
                self.tag5 = self.tfBuffer.lookup_transform("base_link","Tag5",rospy.Time(0))

            except:
                pass
        elif self.state == 2:
            try:
                self.tag5 = self.tfBuffer.lookup_transform("base_link","Tag5",rospy.Time(0))
            except:
                pass
            
    def joint_pos(self,req):
        """
            Function:
                Print the joint position of the robot
            Args:
                req - Empty
        """
        print("UR5e")
        print(self.move_group.get_current_joint_values())
        print("UR16e")
        print(self.move_group_16.get_current_joint_values())
        return EmptyResponse()

    def arm_pos(self,req):
        """
            Function:
                Print the Pose of the End effector of the robot
            Args:
                req - Empty
        """
        print("UR5e")
        print(self.move_group.get_current_pose().pose)
        print("UR16e")
        print(self.move_group_16.get_current_pose().pose)
        return EmptyResponse()
    
    def tuck(self):
        """
            Function:
                Send the arms to a position close to the base when moving to avoid hitting the enviornment.
        """
        self.move_group_16.go(self.UR16e_tuck, wait=True)
        self.move_group_16.stop()

        self.move_group.go(self.UR5e_tuck, wait=True)
        self.move_group.stop()

    def cooling_detach(self):
        """
            Function:
                Make the UR5e detach the water cooling pipe from the isotope.
        """
        rospy.sleep(2.0)
        self.move_group.go(self.UR5e_ready_jp, wait=True)
        self.move_group.stop()

        # Go to cooling pipe
        scale = 1
        waypoints = []

        wpose = self.move_group.get_current_pose().pose
        wpose.position.y = self.tag2.transform.translation.y
        wpose.position.z = self.tag2.transform.translation.z
        wpose.position.x = self.tag2.transform.translation.x + .15

        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)

        self.close_ur5e(0)
        # Move away and detach
        waypoints = []
        wpose = self.move_group.get_current_pose().pose
        wpose.position.x += 0.10
        wpose.position.z += 0.05

        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)

        self.move_group.go(self.UR5e_ready_jp, wait=True)
        self.move_group.stop()

        # Put the water cooling aside
        waypoints = []
        wpose = self.move_group.get_current_pose().pose
        wpose.position.y = self.tag2.transform.translation.y
        wpose.position.z = self.tag2.transform.translation.z - .21

        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)

        self.open_ur5e(0)

        self.move_group.go(self.UR5e_ready_jp, wait=True)
        self.move_group.stop()
        
    def isotope_grab(self):
        """
            Function:
                The UR16e will move to the target and lift it up.
        """
        # Go to Ur16e home
        self.move_group_16.go(self.UR16e_ready_jp, wait=True)
        self.move_group_16.stop()
        # Go to object's y and z
        scale = 1
        waypoints = []

        wpose = self.move_group_16.get_current_pose().pose
        wpose.position.y = self.tag4.transform.translation.y + 0.01
        wpose.position.z = self.tag4.transform.translation.z - 0.025
        

        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group_16.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group_16.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group_16.execute(plan,wait=True)
        #Go to object's x
        scale = 1
        waypoints = []

        wpose = self.move_group_16.get_current_pose().pose
        wpose.position.x = self.tag4.transform.translation.x - 0.20

        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group_16.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group_16.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group_16.execute(plan,wait=True)

        #Grab Objetcts
        self.close_ur16e(0)
        # Move Up 
        scale = 1
        waypoints = []

        wpose = self.move_group_16.get_current_pose().pose
        wpose.position.z += 0.05

        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group_16.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group_16.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group_16.execute(plan,wait=True)

    def isotope_detach(self):
        """
            Function:
                The UR5e will move to the isotope and detach it from the target assembly.
        """
        #Move to Ur5e home 
        self.move_group.go(self.UR5e_ready_jp, wait=True)
        self.move_group.stop()

        #Move to object y and z 
        scale = 1
        waypoints = []

        wpose = self.move_group.get_current_pose().pose
        wpose.position.y = self.tag0.transform.translation.y + 0.015
        wpose.position.z = self.tag0.transform.translation.z - 0.025

        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)
        #Move to object's x 
        scale = 1
        waypoints = []

        wpose = self.move_group.get_current_pose().pose
        wpose.position.x = self.tag0.transform.translation.x + 0.13

        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)
        # Grab Object 
        self.close_ur5e(0)
        # Detach 
        scale = 1
        waypoints = []

        wpose = self.move_group.get_current_pose().pose
        wpose.position.x += 0.2

        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)

        self.move_GOALB()


    def replace(self,req):
        """
            Function:
                Drop off the old isotope with the UR5e, tuck in the UR16e, and then assemble the target assembly.
            args:
                req - Empty
        """
        rospy.sleep(3.)
        
        object_pos = [0,0,0,0,0,0,0]
        object_pos[0:3] = [self.tag5.transform.translation.x,self.tag5.transform.translation.y,self.tag5.transform.translation.z]
        object_pos[3:]= self.ur5e_tool_above_pose

        self.move_group.go(self.ur5e_tool_above_js, wait=True)
        self.move_group.stop()

        self.move_group_16.go(self.UR16e_final_js, wait=True)
        self.move_group_16.stop()
        # Drop off old part

        scale = 1
        waypoints = []

        wpose = self.move_group.get_current_pose().pose
        wpose.position.x = object_pos[0] + 0.15  #The offset from the save'd joint positions above the TE
        wpose.position.y = object_pos[1] + 0.1
        wpose.position.z = object_pos[2] + 0.17
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)
        
        self.close_ur5e(0)
        self.open_ur5e(0)

        self.move_group.go(self.ur5e_tool_above_js, wait=True)
        self.move_group.stop()

        # Go to april tag's x and y 

        scale = 1
        waypoints = []

        wpose = self.move_group.get_current_pose().pose
        wpose.position.x = object_pos[0] - 0.02  #The offset from the save'd joint positions above the TE
        wpose.position.y = object_pos[1] + 0.01
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)

        
        #To to tag's Z
        
        waypoints = []
        wpose = self.move_group.get_current_pose().pose
        wpose.position.z = object_pos[2] + 0.13
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)

        self.close_ur5e(0)

        #GO up
        scale = 1
        waypoints = []

        wpose = self.move_group.get_current_pose().pose
        wpose.position.z = object_pos[2] + 0.27
        waypoints.append(copy.deepcopy(wpose))

        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)
        


        self.move_group.go(self.ur5e_tool_goal_js, wait=True)
        self.move_group.stop()

        #Push up to UR16e part
        scale = 1
        waypoints = []

        wpose = self.move_group.get_current_pose().pose
        wpose.position.x -= 0.07
        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = self.move_group.compute_cartesian_path(
                                        waypoints,   # waypoints to follow
                                        0.01,        # eef_step
                                        0.0)         # jump_threshold

        plan = self.move_group.retime_trajectory(self.robot.get_current_state(),plan,0.5,0.5)
        print(fraction)
        self.move_group.execute(plan,wait=True)

    def get_params(self):
        """
            Function:
                Import all the paramters from the server.
        """
        self.ur5e_tool_above_js = rospy.get_param("/ur5e_tool_above_js")
        self.ur5e_tool_above_pose = rospy.get_param("/ur5e_tool_above_pose")
        self.ur5e_tool_goal_js = rospy.get_param("/ur5e_tool_goal_js")

        self.UR5e_ready_jp = rospy.get_param("/UR5e_ready_jp")
        self.UR16e_ready_jp = rospy.get_param("/UR16e_ready_jp")
        
        self.UR5e_tuck = rospy.get_param("/UR5e_tuck")
        self.UR16e_tuck = rospy.get_param("/UR16e_tuck")
        self.UR16e_final_js = rospy.get_param("/UR16e_final_js")

    def home_poses(self):
        """
            Function:
                Send the robot to its home/ready pose.
        """
        print("Going to home poses")
        
        self.move_group.go(self.UR5e_ready_jp, wait=True)
        self.move_group.stop()

        self.move_group_16.go(self.UR16e_ready_jp, wait=True)
        self.move_group_16.stop()


    def setup_grippers(self):
        """
            Function:
                Create the services to control the grippers for each arm. Also makes them open and close to ensure they're working.
        """
        self.open_ur5e_srv = rospy.Service("marco/open_ur5e", Empty , self.open_ur5e) 
        self.close_ur5e_srv = rospy.Service("marco/close_ur5e", Empty , self.close_ur5e) 
        self.close_ur16e_srv = rospy.Service("marco/close_ur16e", Empty , self.close_ur16e) 
        self.open_ur16e_srv = rospy.Service("marco/open_ur16e", Empty , self.open_ur16e)

        self.ur5e_gripper_pub = rospy.Publisher('ur5e/Robotiq2FGripperRobotOutput', outputMsg.Robotiq2FGripper_robot_output,queue_size=10)
        self.ur16e_gripper_pub = rospy.Publisher('ur16e/Robotiq2FGripperRobotOutput', outputMsg.Robotiq2FGripper_robot_output,queue_size=10)

        rospy.sleep(2.0)
        self.ur5e_gripper = RobotiqControl()
        self.ur16e_gripper = RobotiqControl()
        command_5 = self.ur5e_gripper.reset()
        command_16 = self.ur16e_gripper.reset()
        self.ur5e_gripper_pub.publish(command_5)
        self.ur16e_gripper_pub.publish(command_16)
        rospy.sleep(1.5)
        command_5 = self.ur5e_gripper.activate()
        command_16 = self.ur16e_gripper.activate()
        self.ur5e_gripper_pub.publish(command_5)
        self.ur16e_gripper_pub.publish(command_16)
        rospy.sleep(1.5)
    
    def close_ur5e(self,req):
        """
            Function:
                Close the UR5e Robotiq gripper.
            args:
                req - Empty
        """
        command = self.ur5e_gripper.close()
        self.ur5e_gripper_pub.publish(command)
        rospy.sleep(1.0)
        return EmptyResponse()

    def open_ur5e(self,req):
        """
            Function:
                Open the UR5e Robotiq gripper.
            args:
                req - Empty
        """
        command = self.ur5e_gripper.open()
        self.ur5e_gripper_pub.publish(command)
        rospy.sleep(1.0)

        return EmptyResponse()

    def close_ur16e(self,req):
        """
            Function:
                Close the UR16e Robotiq gripper.
            args:
                req - Empty
        """
        command = self.ur16e_gripper.close()
        self.ur16e_gripper_pub.publish(command)
        rospy.sleep(1.0)
        return EmptyResponse()

    def open_ur16e(self,req):
        """
            Function:
                Open the UR16e Robotiq gripper.
            args:
                req - Empty
        """
        command = self.ur16e_gripper.open()
        self.ur16e_gripper_pub.publish(command)
        rospy.sleep(1.0)

        return EmptyResponse()
 
            
def main(): #The main function.
    rospy.init_node("MockUpNode")
    try:
        move_arm = MockUp()
        rospy.spin()

    except rospy.ROSInterruptException:
        return
    except KeyboardInterrupt:
        return


if __name__ == "__main__":
    main()
